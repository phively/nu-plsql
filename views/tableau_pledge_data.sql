CREATE OR REPLACE VIEW TABLEAU_PLEDGE_DATA AS
WITH

ksm_af_allocs As (
  Select
    legacy_allocation_code
    ,designation_record_id
    ,KSM_af_flag
  From MV_KSM_DESIGNATION 
)

,CALENDAR AS (
  SELECT
    *
  FROM  V_CURRENT_CALENDAR
)

, ksm_pledges As (
  Select Distinct
    KT.OPPORTUNITY_RECORD_ID
  From MV_KSM_TRANSACTIONS KT
  Left Join ksm_af_allocs KAA
    ON KAA.designation_record_id = KT.DESIGNATION_RECORD_ID
  Where 
    KT.SOURCE_TYPE_DETAIL = 'Pledge'
      AND KAA.designation_record_id IS NOT NULL
)

, ksm_payments As (
  Select
    KT.TX_ID
    ,KT.OPPORTUNITY_RECORD_ID
    ,KT.OPPORTUNITY_DONOR_ID
    ,KT.HARD_AND_SOFT_CREDIT_SALESFORCE_ID -- gft.tx_sequence
    ,KT.PAYMENT_RECORD_ID -- gft.pmt_on_pledge_number
    ,KT.DESIGNATION_RECORD_ID
    ,KT.LEGACY_ALLOCATION_CODE-- gft.allocation_code
    ,KT.DESIGNATION_NAME -- gft.Alloc_Short_Name
    ,KT.CREDIT_DATE -- gft.date_of_record
    ,KT.HARD_CREDIT_AMOUNT -- gft.legal_amount
  From MV_KSM_TRANSACTIONS KT
    WHERE KT.SOURCE_TYPE_DETAIL = 'Pledge Payment'
      AND KT.HARD_CREDIT_AMOUNT > 0
  Order By
    PAYMENT_RECORD_ID Asc
    , CREDIT_DATE Desc
)

, pledge_counts As (
  Select DISTINCT
    MKT.OPPORTUNITY_RECORD_ID
    ,MKT.DESIGNATION_RECORD_ID-- pledge.pledge_allocation_name
    ,MAX(DD.UCINN_ASCENDV2__REMAINING_AMOUNT_DUE_FORMULA__C) AS PLEDGE_BALANCE-- max(plgd.prim_pledge_remaining_balance) As pledge_balance
    ,MAX(DO.OPPORTUNITY_AMOUNT) AS PLEDGE_TOTAL-- sum(pledge.pledge_amount)
    ,MAX(DD.UCINN_ASCENDV2__AMOUNT__C) AS PLEDGE_TOTAL_KSM
   -- ,MAX(DD.UCINN_ASCENDV2__REMAINING_AMOUNT_DUE_FORMULA__C) AS NEW_PLEDGE_BALANCE
    ,COUNT(DISTINCT MKT.DESIGNATION_RECORD_ID) AS PLEDGE_ALLOCS-- count(Distinct pledge.pledge_allocation_name)
    ,COUNT(DISTINCT MKT.CREDITED_DONOR_ID) -1 AS PLEDGE_ADDL_DONORS
  From MV_KSM_TRANSACTIONS MKT
  INNER JOIN dm_alumni.dim_opportunity DO
  ON MKT.OPPORTUNITY_RECORD_ID = DO.OPPORTUNITY_RECORD_ID
    AND MKT.OPPORTUNITY_DONOR_ID = DO.OPPORTUNITY_DONOR_ID
  INNER JOIN stg_alumni.ucinn_ascendv2__designation_detail__c DD
    ON DO.OPPORTUNITY_DONOR_ID = DD.UCINN_ASCENDV2__DONOR_ID_FORMULA__C
       AND DO.OPPORTUNITY_RECORD_ID = DD.UCINN_ASCENDV2__PLEDGE_ID_FORMULA__C
       AND MKT.DESIGNATION_NAME = DD.UCINN_ASCENDV2__ACKNOWLEDGEMENT_DESCRIPTION_FORMULA__C
  WHERE MKT.SOURCE_TYPE_DETAIL = 'Pledge'
  Group By MKT.OPPORTUNITY_RECORD_ID, MKT.DESIGNATION_RECORD_ID   
)

,exclude_adjusted As (
-- Find all adjusted opportunities
Select id, stagename
From stg_alumni.opportunity
Where stagename = 'Adjusted'
)

,INSTALLS_EXCLUDED AS (
Select I.*
From stg_alumni.ucinn_ascendv2__installment__c i
Inner Join exclude_adjusted ea
  On ea.id = i.ucinn_ascendv2__opportunity__c
)

,INSTALLMENTS AS (
  SELECT
    *
  FROM stg_alumni.ucinn_ascendv2__installment__c
  MINUS
  SELECT
   *
  FROM INSTALLS_EXCLUDED
)

, pay_sch As (
SELECT DISTINCT
  MT.OPPORTUNITY_RECORD_ID
  ,MT.OPPORTUNITY_DONOR_ID
  ,MT.DESIGNATION_RECORD_ID
  ,CASE WHEN IC.ucinn_ascendv2__gift_date__c IS NOT NULL THEN 
     'P' ELSE 'U' END AS payment_schedule_status
  ,IC.ucinn_ascendv2__expected_date__c AS PAYMENT_SCHEDULE_DATE
  ,KSM_PKG_CALENDAR.get_fiscal_year(IC.ucinn_ascendv2__expected_date__c) AS pay_sch_fy
  ,IC.ucinn_ascendv2__payment_amount__c AS PAYMENT_SCHEDULE_AMOUNT
  ,IC.ucinn_ascendv2__expected_less_payment_amount_formula__c AS payment_schedule_balance
FROM MV_KSM_TRANSACTIONS MT
INNER JOIN MV_KSM_DESIGNATION MKD
ON MT.DESIGNATION_RECORD_ID = MKD.DESIGNATION_RECORD_ID
INNER JOIN dm_alumni.dim_opportunity DO
ON MT.OPPORTUNITY_RECORD_ID = DO.OPPORTUNITY_RECORD_ID
INNER JOIN INSTALLMENTS IC
ON MT.OPPORTUNITY_DONOR_ID = IC.UCINN_ASCENDV2__DONOR_ID_FORMULA__C
  AND MKD.DESIGNATION_SALESFORCE_ID = IC.UCINN_ASCENDV2__DESIGNATION__C
  AND DO.OPPORTUNITY_SALESFORCE_ID = IC.UCINN_ASCENDV2__OPPORTUNITY__C
WHERE MT.SOURCE_TYPE_DETAIL = 'Pledge' 
)

,Count_Payments AS (
  SELECT DISTINCT
    PS.OPPORTUNITY_RECORD_ID
    ,PS.OPPORTUNITY_DONOR_ID
    ,COUNT(PS.PAYMENT_SCHEDULE_DATE) AS PAYMENTS_TO_DATE
  FROM PAY_SCH PS
    WHERE PS.PAYMENT_SCHEDULE_STATUS = 'P'
    GROUP BY PS.OPPORTUNITY_RECORD_ID,PS.OPPORTUNITY_DONOR_ID
)

,LAST_PAYMENTS AS (
    SELECT DISTINCT
      OPPORTUNITY_DONOR_ID
      ,OPPORTUNITY_RECORD_ID
      ,DESIGNATION_RECORD_ID
      ,MAX(CREDIT_DATE) AS LAST_PAYMENT_DATE
      ,MAX(HARD_CREDIT_AMOUNT) KEEP(DENSE_RANK FIRST ORDER BY CREDIT_DATE DESC) LAST_PAYMENT
    FROM ksm_payments
    GROUP BY OPPORTUNITY_DONOR_ID
      ,OPPORTUNITY_RECORD_ID
      ,DESIGNATION_RECORD_ID     
)

, plg As (
  Select DISTINCT
    MKT.OPPORTUNITY_DONOR_ID As id
    ,MKT.OPPORTUNITY_RECORD_ID -- pp.prim_pledge_number As plg
    ,MKT.CREDIT_DATE
    ,MKT.FULL_CIRCLE_CAMPAIGN_PRIORITY
    ,MKT.OPPORTUNITY_STAGE
    ,MKT.OPPORTUNITY_TYPE
    ,MKT.PAYMENT_RECORD_ID
    ,MKT.FISCAL_YEAR
    ,DDC.UCINN_ASCENDV2__PAYMENT_FREQUENCY__C AS PAYMENT_FREQUENCY
    ,DD.PAID_TO_DATE_AMOUNT AS PLEDGE_AMOUNT_PAID_TO_DATE
    ,DO.OPPORTUNITY_AMOUNT + DO.OPPORTUNITY_WRITTEN_OFF_AMOUNT  AS PLEDGE_ORIGINAL_AMOUNT
    ,DO.OPPORTUNITY_COMMENT -- pp.prim_pledge_comment
    ,MKT.DESIGNATION_RECORD_ID -- As alloc
    ,MKT.DESIGNATION_NAME AS alloc_short_name
    ,MKT.KSM_AF_FLAG As af
    ,DO.OPPORTUNITY_AMOUNT AS PRIM_PLEDGE_AMOUNT
    ,MKT.HARD_CREDIT_AMOUNT
    ,DO.OPPORTUNITY_AMOUNT
    ,CASE WHEN DO.OPPORTUNITY_AMOUNT = 0 THEN 0 ELSE MKT.HARD_CREDIT_AMOUNT/DO.OPPORTUNITY_AMOUNT 
      END AS PROP
  From MV_KSM_TRANSACTIONS MKT
  INNER JOIN dm_alumni.dim_opportunity DO
  ON MKT.OPPORTUNITY_RECORD_ID = DO.OPPORTUNITY_RECORD_ID 
    AND DO.OPPORTUNITY_DONOR_ID = DO.OPPORTUNITY_DONOR_ID
  INNER JOIN dm_alumni.dim_designation_detail DD
    ON DO.CONSTITUENT_SALESFORCE_ID = DD.CONSTITUENT_SALESFORCE_ID
       AND DO.OPPORTUNITY_RECORD_ID = DD.PLEDGE_OR_GIFT_RECORD_ID
       AND MKT.DESIGNATION_NAME = DD.DESIGNATION_DETAIL_NAME
  LEFT JOIN stg_alumni.ucinn_ascendv2__designation_detail__c DDC
    ON MKT.OPPORTUNITY_DONOR_ID = DDC.UCINN_ASCENDV2__DONOR_ID_FORMULA__C
      AND MKT.OPPORTUNITY_RECORD_ID = DDC.ucinn_ascendv2__pledge_id_formula__c
  WHERE MKT.SOURCE_TYPE_DETAIL = 'Pledge' 
   AND MKT.HARD_CREDIT_AMOUNT > 0
)

,NEXT_PAYMENT AS (
    SELECT
    plg.id
    ,PS.OPPORTUNITY_RECORD_ID
    ,plg.DESIGNATION_RECORD_ID
    ,MIN(PS.PAYMENT_SCHEDULE_DATE) AS NEXT_PAYMENT_DATE
    ,MIN(pay_sch_fy) AS NEXT_PAY_FY
    ,MIN(PS.PAYMENT_SCHEDULE_BALANCE) KEEP(DENSE_RANK FIRST ORDER BY PAYMENT_SCHEDULE_DATE ASC) AS NEXT_PAYMENT_AMOUNT
    --changed this to split the amount owed to each allocation
   -- ,MIN(plg.prop*PS.PAYMENT_SCHEDULE_BALANCE) KEEP(DENSE_RANK FIRST ORDER BY PAYMENT_SCHEDULE_DATE ASC) AS NEXT_PAYMENT_AMOUNT
  FROM PAY_SCH PS
   INNER JOIN PLG 
   ON PS.OPPORTUNITY_RECORD_ID = PLG.OPPORTUNITY_RECORD_ID
      AND PS.DESIGNATION_RECORD_ID = PLG.DESIGNATION_RECORD_ID
   WHERE PS.PAYMENT_SCHEDULE_STATUS = 'U'
   GROUP BY plg.id,PS.OPPORTUNITY_RECORD_ID,plg.DESIGNATION_RECORD_ID
)

,PLEDGE_BAL AS (
  SELECT
    PC.OPPORTUNITY_RECORD_ID
    ,PC.DESIGNATION_RECORD_ID
    ,MIN(PC.PLEDGE_BALANCE) AS NEW_PLEDGE_BALANCE
    --,MIN(PLG.PROP*PC.PLEDGE_BALANCE) AS NEW_PLEDGE_BALANCE
  FROM PLEDGE_COUNTS PC
  INNER JOIN PLG 
  ON PC.OPPORTUNITY_RECORD_ID = PLG.OPPORTUNITY_RECORD_ID 
    AND PC.DESIGNATION_RECORD_ID = PLG.DESIGNATION_RECORD_ID
  GROUP BY PC.OPPORTUNITY_RECORD_ID
    ,PC.DESIGNATION_RECORD_ID
)

,CFY_BAL AS (
  SELECT DISTINCT
    PLG.ID
    ,PS.OPPORTUNITY_RECORD_ID
    ,PLG.DESIGNATION_RECORD_ID
    ,MIN(ps.pay_sch_fy) AS NFY_PAY
    ,SUM(CASE WHEN PS.PAYMENT_SCHEDULE_STATUS = 'P' AND ps.payment_schedule_balance <> 0.00
                 THEN ps.payment_schedule_balance
          WHEN PS.PAYMENT_SCHEDULE_STATUS = 'U' THEN ps.payment_schedule_balance ELSE 0 END) AS BALANCE_CFY
  FROM PAY_SCH PS
  INNER JOIN CALENDAR CAL
    ON ps.pay_sch_fy = CAL."CURR_FY"
   INNER JOIN PLG 
     ON PS.OPPORTUNITY_RECORD_ID = PLG.OPPORTUNITY_RECORD_ID
     AND PS.OPPORTUNITY_DONOR_ID = PLG.ID
     AND PS.DESIGNATION_RECORD_ID = PLG.DESIGNATION_RECORD_ID
   GROUP BY plg.id,PS.OPPORTUNITY_RECORD_ID,plg.DESIGNATION_RECORD_ID
)

,CFY_PAID AS (
 SELECT DISTINCT
    PLG.ID
    ,PS.OPPORTUNITY_RECORD_ID
    ,PLG.DESIGNATION_RECORD_ID
    ,MIN(ps.pay_sch_fy) AS CFY_PAY
    ,COUNT(DISTINCT ps.payment_schedule_date) AS scheduled_payments_cfy
    ,SUM(CASE WHEN PS.PAYMENT_SCHEDULE_STATUS = 'P' THEN PS.PAYMENT_SCHEDULE_AMOUNT
       ELSE 0 END) AS PAID_CFY
  FROM PAY_SCH PS
  INNER JOIN CALENDAR CAL
    ON ps.pay_sch_fy = CAL."CURR_FY"
   INNER JOIN PLG 
   ON PS.OPPORTUNITY_RECORD_ID = PLG.OPPORTUNITY_RECORD_ID
     AND PS.OPPORTUNITY_DONOR_ID = PLG.ID
     AND PS.DESIGNATION_RECORD_ID = PLG.DESIGNATION_RECORD_ID
    GROUP BY plg.id,PS.OPPORTUNITY_RECORD_ID,plg.DESIGNATION_RECORD_ID
) 

,NFY_BAL AS (
   SELECT 
    PLG.ID
    ,PS.OPPORTUNITY_RECORD_ID
    ,PLG.DESIGNATION_RECORD_ID
    ,MIN(CASE WHEN ps.pay_sch_fy = CAL.CURR_FY+1 THEN PS.PAY_SCH_FY ELSE NULL END) AS NFY_PAY
    ,COUNT(DISTINCT CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+1 THEN ps.payment_schedule_date ELSE NULL END) AS scheduled_payments_nfy
    ,SUM(CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+1 AND PS.PAYMENT_SCHEDULE_STATUS = 'P' AND ps.payment_schedule_balance <> 0.00
                 THEN ps.payment_schedule_balance
          WHEN PS.PAY_SCH_FY = CAL.CURR_FY+1 AND PS.PAYMENT_SCHEDULE_STATUS = 'U' THEN ps.payment_schedule_balance ELSE 0 END) AS balance_nfy
    ,SUM(CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+1  AND PS.PAYMENT_SCHEDULE_STATUS = 'P' THEN PS.PAYMENT_SCHEDULE_AMOUNT ELSE 0 END) AS paid_nfy
    
    ,MIN(CASE WHEN ps.pay_sch_fy = CAL.CURR_FY+2 THEN PS.PAY_SCH_FY ELSE NULL END) AS NFY_PAY1
    ,COUNT(DISTINCT CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+2 THEN ps.payment_schedule_date ELSE NULL END) AS scheduled_payments_nfy1
    ,SUM(CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+2 AND PS.PAYMENT_SCHEDULE_STATUS = 'P' AND ps.payment_schedule_balance <> 0.00
                 THEN ps.payment_schedule_balance
          WHEN PS.PAY_SCH_FY = CAL.CURR_FY+2 AND PS.PAYMENT_SCHEDULE_STATUS = 'U' THEN ps.payment_schedule_balance ELSE 0 END) AS balance_nfy1
    ,SUM(CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+2  AND PS.PAYMENT_SCHEDULE_STATUS = 'P' THEN PS.PAYMENT_SCHEDULE_AMOUNT ELSE 0 END) AS paid_nfy1
    
    ,MIN(CASE WHEN ps.pay_sch_fy = CAL.CURR_FY+3 THEN PS.PAY_SCH_FY ELSE NULL END) AS NFY_PAY2
    ,COUNT(DISTINCT CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+3 THEN ps.payment_schedule_date ELSE NULL END) AS scheduled_payments_nfy2
    ,SUM(CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+3 AND PS.PAYMENT_SCHEDULE_STATUS = 'P' AND ps.payment_schedule_balance <> 0.00
                 THEN ps.payment_schedule_balance
          WHEN PS.PAY_SCH_FY = CAL.CURR_FY+3 AND PS.PAYMENT_SCHEDULE_STATUS = 'U' THEN ps.payment_schedule_balance ELSE 0 END) AS balance_nfy2
    ,SUM(CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+3  AND PS.PAYMENT_SCHEDULE_STATUS = 'P' THEN PS.PAYMENT_SCHEDULE_AMOUNT ELSE 0 END) AS paid_nfy2
    
    ,MIN(CASE WHEN ps.pay_sch_fy = CAL.CURR_FY+4 THEN PS.PAY_SCH_FY ELSE NULL END) AS NFY_PAY3
    ,COUNT(DISTINCT CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+4 THEN ps.payment_schedule_date ELSE NULL END) AS scheduled_payments_nfy3
    ,SUM(CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+4 AND PS.PAYMENT_SCHEDULE_STATUS = 'P' AND ps.payment_schedule_balance <> 0.00
                 THEN ps.payment_schedule_balance
          WHEN PS.PAY_SCH_FY = CAL.CURR_FY+4 AND PS.PAYMENT_SCHEDULE_STATUS = 'U' THEN ps.payment_schedule_balance ELSE 0 END) AS balance_nfy3
    ,SUM(CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+4  AND PS.PAYMENT_SCHEDULE_STATUS = 'P' THEN PS.PAYMENT_SCHEDULE_AMOUNT ELSE 0 END) AS paid_nfy3
    
    ,MIN(CASE WHEN ps.pay_sch_fy = CAL.CURR_FY+5 THEN PS.PAY_SCH_FY ELSE NULL END) AS NFY_PAY4
    ,COUNT(DISTINCT CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+5 THEN ps.payment_schedule_date ELSE NULL END) AS scheduled_payments_nfy4
    ,SUM(CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+5 AND PS.PAYMENT_SCHEDULE_STATUS = 'P' AND ps.payment_schedule_balance <> 0.00
                 THEN ps.payment_schedule_balance
          WHEN PS.PAY_SCH_FY = CAL.CURR_FY+5 AND PS.PAYMENT_SCHEDULE_STATUS = 'U' THEN ps.payment_schedule_balance ELSE 0 END) AS balance_nfy4
    ,SUM(CASE WHEN PS.PAY_SCH_FY = CAL.CURR_FY+5  AND PS.PAYMENT_SCHEDULE_STATUS = 'P' THEN PS.PAYMENT_SCHEDULE_AMOUNT ELSE 0 END) AS paid_nfy4
  FROM PAY_SCH PS
  CROSS JOIN CALENDAR CAL
   INNER JOIN PLG 
   ON PS.OPPORTUNITY_RECORD_ID = PLG.OPPORTUNITY_RECORD_ID
     AND PS.OPPORTUNITY_DONOR_ID = PLG.ID
     AND PS.DESIGNATION_RECORD_ID = PLG.DESIGNATION_RECORD_ID
   GROUP BY plg.id,PS.OPPORTUNITY_RECORD_ID,plg.DESIGNATION_RECORD_ID
)

,PFY1 AS (
 SELECT DISTINCT
    PLG.ID
    ,PS.OPPORTUNITY_RECORD_ID
    ,PLG.DESIGNATION_RECORD_ID
    ,MIN(ps.pay_sch_fy) AS PFY1
    ,COUNT(DISTINCT ps.payment_schedule_date) AS scheduled_payments_PFY1
    ,SUM(CASE WHEN PS.PAYMENT_SCHEDULE_STATUS = 'P' THEN PS.PAYMENT_SCHEDULE_AMOUNT
       ELSE 0 END) AS PAID_PFY1
     ,SUM(CASE WHEN PS.PAYMENT_SCHEDULE_STATUS = 'U' THEN ps.payment_schedule_balance
       ELSE 0 END) AS BALANCE_PFY1
  FROM PAY_SCH PS
  INNER JOIN CALENDAR CAL
    ON ps.pay_sch_fy = CAL."CURR_FY"-1
   INNER JOIN PLG 
   ON PS.OPPORTUNITY_RECORD_ID = PLG.OPPORTUNITY_RECORD_ID
     AND PS.OPPORTUNITY_DONOR_ID = PLG.ID
     AND PS.DESIGNATION_RECORD_ID = PLG.DESIGNATION_RECORD_ID
    GROUP BY plg.id,PS.OPPORTUNITY_RECORD_ID,plg.DESIGNATION_RECORD_ID
) 

,KSM_LAST_GIFT AS (
  SELECT
    MKST.OPPORTUNITY_DONOR_ID 
    ,MAX(MKST.CREDIT_DATE) KEEP (DENSE_RANK FIRST ORDER BY MKST.CREDIT_DATE DESC) AS LAST_GIFT_DATE
    ,MAX(MKST.DESIGNATION_NAME) KEEP (DENSE_RANK FIRST ORDER BY MKST.CREDIT_DATE DESC) AS LAST_GIFT_DESIGNATION
    ,MAX(MKST.SOURCE_TYPE_DETAIL) KEEP (DENSE_RANK FIRST ORDER BY MKST.CREDIT_DATE DESC) AS LAST_GIFT_TYPE
    ,MAX(MKST.RECOGNITION_CREDIT) KEEP (DENSE_RANK FIRST ORDER BY MKST.CREDIT_DATE DESC) AS LAST_GIFT_RECOGNITION_CREDIT
  FROM MV_KSM_TRANSACTIONS MKST
  INNER JOIN PLG
  ON MKST.OPPORTUNITY_DONOR_ID = PLG.ID
  GROUP BY MKST.OPPORTUNITY_DONOR_ID
)

, count_pledges As (
  Select DISTINCT
    plg.id
    ,plg.OPPORTUNITY_RECORD_ID
    ,plg.DESIGNATION_RECORD_ID
    ,MIN(PLEDGE_AMOUNT_PAID_TO_DATE)AS PLEDGE_AMOUNT_PAID_TO_DATE
    ,CP.scheduled_payments_cfy
    ,CP.PAID_CFY
    ,CB.balance_cfy
    ,NFB.scheduled_payments_nfy
    ,NFB.paid_nfy
    ,NFB.balance_nfy 
    ,NFB.scheduled_payments_nfy1
    ,NFB.paid_nfy1
    ,NFB.balance_nfy1
    ,NFB.scheduled_payments_nfy2
    ,NFB.paid_nfy2
    ,NFB.balance_nfy2
    ,NFB.scheduled_payments_nfy3
    ,NFB.paid_nfy3
    ,NFB.balance_nfy3
    ,NFB.scheduled_payments_nfy4
    ,NFB.paid_nfy4
    ,NFB.balance_nfy4 
    ,PFY1.scheduled_payments_pfy1
    ,PFY1.PAID_PFY1
    ,PFY1.BALANCE_PFY1
  From pay_sch sc
  Cross Join V_CURRENT_CALENDAR cal
  Inner Join plg
    On plg.OPPORTUNITY_RECORD_ID = sc.OPPORTUNITY_RECORD_ID
  LEFT JOIN CFY_PAID CP
    ON PLG.ID = CP.ID
    AND PLG.OPPORTUNITY_RECORD_ID = CP.OPPORTUNITY_RECORD_ID
    AND PLG.DESIGNATION_RECORD_ID = CP.DESIGNATION_RECORD_ID
  LEFT JOIN CFY_BAL CB
    ON PLG.ID = CB.ID
    AND PLG.OPPORTUNITY_RECORD_ID = CB.OPPORTUNITY_RECORD_ID
    AND PLG.DESIGNATION_RECORD_ID = CB.DESIGNATION_RECORD_ID
  LEFT JOIN NFY_BAL NFB
    ON PLG.ID = NFB.ID
    AND PLG.OPPORTUNITY_RECORD_ID = NFB.OPPORTUNITY_RECORD_ID
    AND PLG.DESIGNATION_RECORD_ID = NFB.DESIGNATION_RECORD_ID
  LEFT JOIN PFY1
    ON PLG.ID = PFY1.ID
    AND PLG.OPPORTUNITY_RECORD_ID = PFY1.OPPORTUNITY_RECORD_ID
    AND PLG.DESIGNATION_RECORD_ID = PFY1.DESIGNATION_RECORD_ID
  Group By
    plg.id
    , plg.OPPORTUNITY_RECORD_ID
    ,plg.DESIGNATION_RECORD_ID
    ,CB.balance_cfy
    ,CP.scheduled_payments_cfy
    ,CP.PAID_CFY
    ,NFB.scheduled_payments_nfy
    ,NFB.paid_nfy
    ,NFB.balance_nfy
    ,NFB.scheduled_payments_nfy1
    ,NFB.paid_nfy1
    ,NFB.balance_nfy1
    ,NFB.scheduled_payments_nfy2
    ,NFB.paid_nfy2
    ,NFB.balance_nfy2
    ,NFB.scheduled_payments_nfy3
    ,NFB.paid_nfy3
    ,NFB.balance_nfy3
    ,NFB.scheduled_payments_nfy4
    ,NFB.paid_nfy4
    ,NFB.balance_nfy4
    ,PFY1.scheduled_payments_pfy1
    ,PFY1.PAID_PFY1
    ,PFY1.BALANCE_PFY1
)

, KSM_SUMMARY AS (
   SELECT
     ME.DONOR_ID
     ,ME.HOUSEHOLD_ID
     ,GS.CASH_CFY
     ,GS.EXPENDABLE_CFY
   FROM MV_ENTITY ME
     INNER JOIN mv_ksm_giving_summary GS
     ON ME.HOUSEHOLD_ID = GS.HOUSEHOLD_ID
)

SELECT DISTINCT
  ME.DONOR_ID
  ,CASE WHEN ME.PERSON_OR_ORG = 'O' THEN ME.SORT_NAME ELSE SAL.UCINN_ASCENDV2__ADDRESSEE_LINE_1__C END AS PREF_MAIL_NAME
  ,ME.INSTITUTIONAL_SUFFIX
  ,CASE WHEN CT.CONSTITUENT_DONOR_ID IS NOT NULL THEN 'Y' ELSE 'N' END AS TRUSTEE
  ,PLG.OPPORTUNITY_RECORD_ID
  ,PLG.CREDIT_DATE
  --CATEGORIZER?
  ,PLG.FULL_CIRCLE_CAMPAIGN_PRIORITY
  ,PLG.alloc_short_name AS DESIGNATION_NAME
  ,PLG.DESIGNATION_RECORD_ID
  ,PLG.OPPORTUNITY_STAGE
  ,PLG.OPPORTUNITY_TYPE
  ,PLG.FISCAL_YEAR
  ,pledge_counts.pledge_total_ksm AS PLEDGE_KSM_TOTAL
  ,PLG.PLEDGE_ORIGINAL_AMOUNT
  ,CP.PLEDGE_AMOUNT_PAID_TO_DATE
  ,PLEDGE_BAL.NEW_PLEDGE_BALANCE
  ,PLG.PAYMENT_FREQUENCY
  ,CASE WHEN PLG.OPPORTUNITY_STAGE = 'Active' AND NP.NEXT_PAYMENT_DATE > CC."TODAY" THEN 0 
     WHEN PLG.OPPORTUNITY_STAGE = 'Active' AND NP.NEXT_PAYMENT_DATE < CC."TODAY" 
       THEN ROUND(MONTHS_BETWEEN(CC.TODAY,NP.NEXT_PAYMENT_DATE)) END AS MONTHS_OVERDUE1
  ,CASE WHEN PLG.OPPORTUNITY_STAGE = 'Active' AND NP.NEXT_PAYMENT_DATE > CC."TODAY" THEN 0
        WHEN PLG.OPPORTUNITY_STAGE = 'Active' THEN ROUND(MONTHS_BETWEEN(CC.TODAY, LP.LAST_PAYMENT_DATE)) END AS NEW_MONTHS_OVERDUE      
  ,NP.NEXT_PAYMENT_DATE      
  ,NP.NEXT_PAYMENT_AMOUNT       
  ,LP.LAST_PAYMENT_DATE
  ,LP.LAST_PAYMENT AS LAST_PAYMENT_AMOUNT 
  ,CPAY.PAYMENTS_TO_DATE   
  ,PLG.OPPORTUNITY_COMMENT
  ,PAH.STAFF_NAME AS PRM
  ,LAH.STAFF_NAME AS LAGM
  ,SH.SERVICE_INDICATORS_CONCAT
  ,ME.FIRST_NAME
  ,ME.LAST_NAME
  ,ME.SORT_NAME
  , cp.scheduled_payments_pfy1
  , cp.paid_pfy1
  , cp.balance_pfy1
  , cp.scheduled_payments_cfy
  , cp.paid_cfy
  , cp.balance_cfy
  , cp.scheduled_payments_nfy
  , cp.paid_nfy
  , cp.balance_nfy
  , cp.scheduled_payments_nfy1
  , cp.paid_nfy1
  , cp.balance_nfy1
  , cp.scheduled_payments_nfy2
  , cp.paid_nfy2
  , cp.balance_nfy2
  , cp.scheduled_payments_nfy3
  , cp.paid_nfy3
  , cp.balance_nfy3
  , cp.scheduled_payments_nfy4
  , cp.paid_nfy4
  , cp.balance_nfy4
  , KSUM.CASH_CFY
  , KSUM.EXPENDABLE_CFY
  , KGS.LAST_GIFT_DATE
  , KGS.LAST_GIFT_DESIGNATION
  , KGS.LAST_GIFT_TYPE
  , KGS.LAST_GIFT_RECOGNITION_CREDIT
FROM MV_ENTITY ME
CROSS JOIN CALENDAR CC
INNER JOIN PLG
ON ME.DONOR_ID = PLG.ID
LEFT JOIN stg_alumni.ucinn_ascendv2__salutation__c  SAL
  ON ME.SALESFORCE_ID = SAL.ucinn_ascendv2__contact__c
  AND SAL.UCINN_ASCENDV2__SALUTATION_TYPE__C = 'Formal'
  AND SAL.UCINN_ASCENDV2__SALUTATION_RECORD_TYPE_FORMULA__C = 'Ind'
LEFT JOIN v_committee_trustee CT
ON PLG.ID = CT.CONSTITUENT_DONOR_ID
Inner Join pledge_counts
  On pledge_counts.OPPORTUNITY_RECORD_ID = PLG.OPPORTUNITY_RECORD_ID
  AND pledge_counts.DESIGNATION_RECORD_ID = PLG.DESIGNATION_RECORD_ID
INNER JOIN count_pledges cp
  ON ME.DONOR_ID = CP.ID
  AND PLG.OPPORTUNITY_RECORD_ID = CP.OPPORTUNITY_RECORD_ID
  AND PLG.DESIGNATION_RECORD_ID = CP.DESIGNATION_RECORD_ID
LEFT JOIN NEXT_PAYMENT NP
 ON PLG.ID = NP.ID
 AND PLG.OPPORTUNITY_RECORD_ID = NP.OPPORTUNITY_RECORD_ID
 AND PLG.DESIGNATION_RECORD_ID = NP.DESIGNATION_RECORD_ID
LEFT JOIN PLEDGE_BAL 
  ON PLG.OPPORTUNITY_RECORD_ID = PLEDGE_BAL.OPPORTUNITY_RECORD_ID
  AND PLG.DESIGNATION_RECORD_ID = PLEDGE_BAL.DESIGNATION_RECORD_ID
LEFT JOIN LAST_PAYMENTS LP
 ON PLG.OPPORTUNITY_RECORD_ID = LP.OPPORTUNITY_RECORD_ID
 AND PLG.ID = LP.OPPORTUNITY_DONOR_ID
 AND PLG.DESIGNATION_RECORD_ID = LP.DESIGNATION_RECORD_ID
LEFT JOIN Count_Payments CPAY
 ON PLG.OPPORTUNITY_RECORD_ID = CPAY.OPPORTUNITY_RECORD_ID
 AND PLG.ID = CPAY.OPPORTUNITY_DONOR_ID
LEFT JOIN MV_ASSIGNMENT_HISTORY PAH
 ON PLG.ID = PAH.DONOR_ID
   AND PAH.IS_ACTIVE_INDICATOR = 'true'
   AND PAH.ASSIGNMENT_CODE = 'PRM'
LEFT JOIN MV_ASSIGNMENT_HISTORY LAH
 ON PLG.ID = LAH.DONOR_ID
   AND LAH.IS_ACTIVE_INDICATOR = 'true'
   AND LAH.ASSIGNMENT_CODE = 'LAGM' 
LEFT JOIN MV_SPECIAL_HANDLING SH
  ON PLG.ID = SH.DONOR_ID
LEFT JOIN  KSM_LAST_GIFT KGS
ON PLG.ID= KGS.OPPORTUNITY_DONOR_ID
LEFT JOIN KSM_SUMMARY KSUM
  ON PLG.ID = KSUM.DONOR_ID
WHERE PLG.OPPORTUNITY_TYPE IN ('CC Recurring', 'Recurring', 'Standard', 'Non-Binding Intent', 'Telefund')
ORDER BY ME.DONOR_ID, PLG.OPPORTUNITY_RECORD_ID
